// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type OutboxMessageStatus string

const (
	OutboxMessageStatusPENDING   OutboxMessageStatus = "PENDING"
	OutboxMessageStatusPUBLISHED OutboxMessageStatus = "PUBLISHED"
)

func (e *OutboxMessageStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OutboxMessageStatus(s)
	case string:
		*e = OutboxMessageStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OutboxMessageStatus: %T", src)
	}
	return nil
}

type NullOutboxMessageStatus struct {
	OutboxMessageStatus OutboxMessageStatus
	Valid               bool // Valid is true if OutboxMessageStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOutboxMessageStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OutboxMessageStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OutboxMessageStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOutboxMessageStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OutboxMessageStatus), nil
}

type MessageOutbox struct {
	ID             int64
	MessageType    string
	MessagePayload json.RawMessage
	MessageStatus  OutboxMessageStatus
	CreatedAt      time.Time
	UpdatedAt      time.Time
}
