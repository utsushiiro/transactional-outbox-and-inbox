// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const insertInboxMessage = `-- name: InsertInboxMessage :one
INSERT INTO inbox_messages (message_uuid, message_payload, received_at)
VALUES ($1, $2, NOW())
RETURNING message_uuid, message_payload, received_at, processed_at, created_at, updated_at
`

type InsertInboxMessageParams struct {
	MessageUuid    uuid.UUID
	MessagePayload json.RawMessage
}

func (q *Queries) InsertInboxMessage(ctx context.Context, arg InsertInboxMessageParams) (InboxMessage, error) {
	row := q.db.QueryRowContext(ctx, insertInboxMessage, arg.MessageUuid, arg.MessagePayload)
	var i InboxMessage
	err := row.Scan(
		&i.MessageUuid,
		&i.MessagePayload,
		&i.ReceivedAt,
		&i.ProcessedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertOutboxMessage = `-- name: InsertOutboxMessage :one
INSERT INTO outbox_messages (message_topic, message_payload)
VALUES ($1, $2)
RETURNING message_uuid, message_topic, message_payload, sent_at, created_at, updated_at
`

type InsertOutboxMessageParams struct {
	MessageTopic   string
	MessagePayload json.RawMessage
}

func (q *Queries) InsertOutboxMessage(ctx context.Context, arg InsertOutboxMessageParams) (OutboxMessage, error) {
	row := q.db.QueryRowContext(ctx, insertOutboxMessage, arg.MessageTopic, arg.MessagePayload)
	var i OutboxMessage
	err := row.Scan(
		&i.MessageUuid,
		&i.MessageTopic,
		&i.MessagePayload,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUnsentOutboxMessages = `-- name: SelectUnsentOutboxMessages :many
SELECT message_uuid, message_topic, message_payload, sent_at, created_at, updated_at
FROM outbox_messages
WHERE sent_at IS NULL
ORDER BY created_at ASC
LIMIT $1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) SelectUnsentOutboxMessages(ctx context.Context, limit int32) ([]OutboxMessage, error) {
	rows, err := q.db.QueryContext(ctx, selectUnsentOutboxMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OutboxMessage
	for rows.Next() {
		var i OutboxMessage
		if err := rows.Scan(
			&i.MessageUuid,
			&i.MessageTopic,
			&i.MessagePayload,
			&i.SentAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOutboxMessageAsSent = `-- name: UpdateOutboxMessageAsSent :one
UPDATE outbox_messages
SET sent_at = NOW()
WHERE message_uuid = $1
RETURNING message_uuid, message_topic, message_payload, sent_at, created_at, updated_at
`

func (q *Queries) UpdateOutboxMessageAsSent(ctx context.Context, messageUuid uuid.UUID) (OutboxMessage, error) {
	row := q.db.QueryRowContext(ctx, updateOutboxMessageAsSent, messageUuid)
	var i OutboxMessage
	err := row.Scan(
		&i.MessageUuid,
		&i.MessageTopic,
		&i.MessagePayload,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
