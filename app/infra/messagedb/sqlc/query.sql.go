// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertInboxMessage = `-- name: InsertInboxMessage :exec
INSERT INTO inbox_messages (message_uuid, message_payload, received_at, processed_at)
VALUES ($1, $2, $3, $4)
`

type InsertInboxMessageParams struct {
	MessageUuid    uuid.UUID
	MessagePayload []byte
	ReceivedAt     time.Time
	ProcessedAt    *time.Time
}

func (q *Queries) InsertInboxMessage(ctx context.Context, arg InsertInboxMessageParams) error {
	_, err := q.db.Exec(ctx, insertInboxMessage,
		arg.MessageUuid,
		arg.MessagePayload,
		arg.ReceivedAt,
		arg.ProcessedAt,
	)
	return err
}

const insertOutboxMessage = `-- name: InsertOutboxMessage :exec
INSERT INTO outbox_messages (message_uuid, message_payload, sent_at)
VALUES ($1, $2, $3)
`

type InsertOutboxMessageParams struct {
	MessageUuid    uuid.UUID
	MessagePayload []byte
	SentAt         *time.Time
}

func (q *Queries) InsertOutboxMessage(ctx context.Context, arg InsertOutboxMessageParams) error {
	_, err := q.db.Exec(ctx, insertOutboxMessage, arg.MessageUuid, arg.MessagePayload, arg.SentAt)
	return err
}

const selectUnprocessedInboxMessage = `-- name: SelectUnprocessedInboxMessage :one
/**
 * inbox_messages table
 */

SELECT message_uuid, message_payload, received_at, processed_at, created_at, updated_at
FROM inbox_messages
WHERE processed_at IS NULL
ORDER BY received_at ASC
LIMIT 1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) SelectUnprocessedInboxMessage(ctx context.Context) (InboxMessage, error) {
	row := q.db.QueryRow(ctx, selectUnprocessedInboxMessage)
	var i InboxMessage
	err := row.Scan(
		&i.MessageUuid,
		&i.MessagePayload,
		&i.ReceivedAt,
		&i.ProcessedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUnsentOutboxMessage = `-- name: SelectUnsentOutboxMessage :one
/**
 * outbox_messages table
 */

SELECT message_uuid, message_payload, sent_at, created_at, updated_at
FROM outbox_messages
WHERE sent_at IS NULL
ORDER BY created_at ASC
LIMIT 1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) SelectUnsentOutboxMessage(ctx context.Context) (OutboxMessage, error) {
	row := q.db.QueryRow(ctx, selectUnsentOutboxMessage)
	var i OutboxMessage
	err := row.Scan(
		&i.MessageUuid,
		&i.MessagePayload,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUnsentOutboxMessages = `-- name: SelectUnsentOutboxMessages :many
SELECT message_uuid, message_payload, sent_at, created_at, updated_at
FROM outbox_messages
WHERE sent_at IS NULL
ORDER BY created_at ASC
LIMIT $1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) SelectUnsentOutboxMessages(ctx context.Context, limit int32) ([]OutboxMessage, error) {
	rows, err := q.db.Query(ctx, selectUnsentOutboxMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OutboxMessage
	for rows.Next() {
		var i OutboxMessage
		if err := rows.Scan(
			&i.MessageUuid,
			&i.MessagePayload,
			&i.SentAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInboxMessage = `-- name: UpdateInboxMessage :exec
UPDATE inbox_messages
SET message_payload = $2, received_at = $3, processed_at = $4
WHERE message_uuid = $1
`

type UpdateInboxMessageParams struct {
	MessageUuid    uuid.UUID
	MessagePayload []byte
	ReceivedAt     time.Time
	ProcessedAt    *time.Time
}

func (q *Queries) UpdateInboxMessage(ctx context.Context, arg UpdateInboxMessageParams) error {
	_, err := q.db.Exec(ctx, updateInboxMessage,
		arg.MessageUuid,
		arg.MessagePayload,
		arg.ReceivedAt,
		arg.ProcessedAt,
	)
	return err
}

const updateOutboxMessage = `-- name: UpdateOutboxMessage :exec
UPDATE outbox_messages
SET message_payload = $2, sent_at = $3
WHERE message_uuid = $1
`

type UpdateOutboxMessageParams struct {
	MessageUuid    uuid.UUID
	MessagePayload []byte
	SentAt         *time.Time
}

func (q *Queries) UpdateOutboxMessage(ctx context.Context, arg UpdateOutboxMessageParams) error {
	_, err := q.db.Exec(ctx, updateOutboxMessage, arg.MessageUuid, arg.MessagePayload, arg.SentAt)
	return err
}
